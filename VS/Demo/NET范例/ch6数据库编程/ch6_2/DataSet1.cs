//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace ch6_2 {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class DataSet1 : DataSet {
        
        private informationDataTable tableinformation;
        
        public DataSet1() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected DataSet1(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["information"] != null)) {
                    this.Tables.Add(new informationDataTable(ds.Tables["information"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public informationDataTable information {
            get {
                return this.tableinformation;
            }
        }
        
        public override DataSet Clone() {
            DataSet1 cln = ((DataSet1)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["information"] != null)) {
                this.Tables.Add(new informationDataTable(ds.Tables["information"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableinformation = ((informationDataTable)(this.Tables["information"]));
            if ((this.tableinformation != null)) {
                this.tableinformation.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "DataSet1";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/DataSet1.xsd";
            this.Locale = new System.Globalization.CultureInfo("zh-CN");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableinformation = new informationDataTable();
            this.Tables.Add(this.tableinformation);
        }
        
        private bool ShouldSerializeinformation() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void informationRowChangeEventHandler(object sender, informationRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class informationDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn column电话;
            
            private DataColumn column电子邮件;
            
            private DataColumn column年龄;
            
            private DataColumn column姓名;
            
            internal informationDataTable() : 
                    base("information") {
                this.InitClass();
            }
            
            internal informationDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn 电话Column {
                get {
                    return this.column电话;
                }
            }
            
            internal DataColumn 电子邮件Column {
                get {
                    return this.column电子邮件;
                }
            }
            
            internal DataColumn 年龄Column {
                get {
                    return this.column年龄;
                }
            }
            
            internal DataColumn 姓名Column {
                get {
                    return this.column姓名;
                }
            }
            
            public informationRow this[int index] {
                get {
                    return ((informationRow)(this.Rows[index]));
                }
            }
            
            public event informationRowChangeEventHandler informationRowChanged;
            
            public event informationRowChangeEventHandler informationRowChanging;
            
            public event informationRowChangeEventHandler informationRowDeleted;
            
            public event informationRowChangeEventHandler informationRowDeleting;
            
            public void AddinformationRow(informationRow row) {
                this.Rows.Add(row);
            }
            
            public informationRow AddinformationRow(string 电话, string 电子邮件, int 年龄, string 姓名) {
                informationRow rowinformationRow = ((informationRow)(this.NewRow()));
                rowinformationRow.ItemArray = new object[] {
                        电话,
                        电子邮件,
                        年龄,
                        姓名};
                this.Rows.Add(rowinformationRow);
                return rowinformationRow;
            }
            
            public informationRow FindBy姓名(string 姓名) {
                return ((informationRow)(this.Rows.Find(new object[] {
                            姓名})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                informationDataTable cln = ((informationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new informationDataTable();
            }
            
            internal void InitVars() {
                this.column电话 = this.Columns["电话"];
                this.column电子邮件 = this.Columns["电子邮件"];
                this.column年龄 = this.Columns["年龄"];
                this.column姓名 = this.Columns["姓名"];
            }
            
            private void InitClass() {
                this.column电话 = new DataColumn("电话", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column电话);
                this.column电子邮件 = new DataColumn("电子邮件", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column电子邮件);
                this.column年龄 = new DataColumn("年龄", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column年龄);
                this.column姓名 = new DataColumn("姓名", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column姓名);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.column姓名}, true));
                this.column姓名.AllowDBNull = false;
                this.column姓名.Unique = true;
            }
            
            public informationRow NewinformationRow() {
                return ((informationRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new informationRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(informationRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.informationRowChanged != null)) {
                    this.informationRowChanged(this, new informationRowChangeEvent(((informationRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.informationRowChanging != null)) {
                    this.informationRowChanging(this, new informationRowChangeEvent(((informationRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.informationRowDeleted != null)) {
                    this.informationRowDeleted(this, new informationRowChangeEvent(((informationRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.informationRowDeleting != null)) {
                    this.informationRowDeleting(this, new informationRowChangeEvent(((informationRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveinformationRow(informationRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class informationRow : DataRow {
            
            private informationDataTable tableinformation;
            
            internal informationRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableinformation = ((informationDataTable)(this.Table));
            }
            
            public string 电话 {
                get {
                    try {
                        return ((string)(this[this.tableinformation.电话Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableinformation.电话Column] = value;
                }
            }
            
            public string 电子邮件 {
                get {
                    try {
                        return ((string)(this[this.tableinformation.电子邮件Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableinformation.电子邮件Column] = value;
                }
            }
            
            public int 年龄 {
                get {
                    try {
                        return ((int)(this[this.tableinformation.年龄Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableinformation.年龄Column] = value;
                }
            }
            
            public string 姓名 {
                get {
                    return ((string)(this[this.tableinformation.姓名Column]));
                }
                set {
                    this[this.tableinformation.姓名Column] = value;
                }
            }
            
            public bool Is电话Null() {
                return this.IsNull(this.tableinformation.电话Column);
            }
            
            public void Set电话Null() {
                this[this.tableinformation.电话Column] = System.Convert.DBNull;
            }
            
            public bool Is电子邮件Null() {
                return this.IsNull(this.tableinformation.电子邮件Column);
            }
            
            public void Set电子邮件Null() {
                this[this.tableinformation.电子邮件Column] = System.Convert.DBNull;
            }
            
            public bool Is年龄Null() {
                return this.IsNull(this.tableinformation.年龄Column);
            }
            
            public void Set年龄Null() {
                this[this.tableinformation.年龄Column] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class informationRowChangeEvent : EventArgs {
            
            private informationRow eventRow;
            
            private DataRowAction eventAction;
            
            public informationRowChangeEvent(informationRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public informationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
